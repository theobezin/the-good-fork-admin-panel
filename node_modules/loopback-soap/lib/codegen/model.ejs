<%
function printParams() {
    var params = [];
    for (var j = 0; j < op.accepts.length; j++) {
        var param = op.accepts[j];
        var type = param.type || '*';
        if (Array.isArray(param.type)) {
            type = param.type[0] + '[]';
        }
        params.push('* @param {' + type + '} ' + param.arg + ' ' + param.description);
    }
    return params.join('\n');
}


function printMethod(modelName) {
    var className = modelName || 'Model';
    var method = className + '.' + op.operationId
            + ' = function(';
    var params = op.accepts.map(function(a) {
        return a.arg;
    });
    params.push('callback');
    return method + params.join(', ') + ') {';
}

function joinParams(params) {
  const newParams = params.map(param => `normalize(${param})`);
  return newParams.join(',');
}

function printOperation() {
    var serviceName = '_soapModel';
    var params = op.accepts.map(function(a) {
        return a.arg;
    });
    var method = serviceName + '.' + op.operationId
            + '(' + joinParams(params) + ', function (err, response) {';
    return method;
}

%>
'use strict';
var server = require('../../server/server');

function normalize(parameter) {
  return typeof parameter.toJSON === 'function' ? parameter.toJSON() : parameter;
}

module.exports = function(<%- modelName || 'Model' %>) {

  var soapDataSource = server.datasources.<%- datasource %>;
  var _soapModel;

  soapDataSource.once('connected', function () {
    // Create the model
    _soapModel = soapDataSource.createModel('<%- modelName %>', {});
  });

<%
var i;
for(var i = 0; i < operations.length; i++) {
    var op = operations[i];
%>
  /**
   * <%- op.description || op.summary || op.operationId %>
   <%- printParams() %>
   * @callback {Function} callback Callback function
   * @returns {<%- op.returnType %>} callback containing error or result. Result is the response/soap body in JSON form.
   */
  <%- printMethod(modelName) %>
      <%- printOperation() %>
        var result = response;
        callback(err, result);
      });
  }
  <% } %>
  // Map to REST/HTTP
<%
for(i = 0; i < operations.length; i++) {
    var op = operations[i];
%>
  <%- modelName || 'Model' %>.remoteMethod('<%- op.operationId %>',
  <%- op.printRemoting() %>
  );
  <% } %>
}
